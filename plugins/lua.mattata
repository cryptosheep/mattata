--[[
    Based on a plugin by topkecleon.
    Copyright 2020 Matthew Hesketh <wrxck0@gmail.com>
    This code is licensed under the MIT. See LICENSE for details.
]]

local lua = {}
local mattata = require('mattata')
local url = require('socket.url')
local json = require('serpent')

function lua:init()
    lua.commands = mattata.commands(self.info.username):command('lua').table
    json = require('dkjson')
    lua.serialise = function(input)
        return json.encode(
            input,
            {
                indent = true
            }
        )
    end
    lua.error_message = function(x)
        return 'Error:\n' .. tostring(x)
    end
end

function lua:on_message(message, configuration, language)
    if not mattata.is_global_admin(message.from.id) then
        return
    end
    local input = mattata.input(message.text)
    if not input then
        local text = language['lua']['1']
        return mattata.send_reply(message, text)
    end
    local output, success = (load or loadstring)([[
    local mattata = require('mattata')
    local configuration = require('configuration')
    local api = require('telegram-bot-lua.core').configure(configuration.bot_token)
    local tools = require('telegram-bot-lua.tools')
    local https = require('ssl.https')
    local http = require('socket.http')
    local url = require('socket.url')
    local ltn12 = require('ltn12')
    local json = require('dkjson')
    local utf8 = require('lua-utf8')
    local socket = require('socket')
    return function (message, configuration, self)
    ]] .. input .. [[
    end]])
    if output == nil then
        output = success
    else
        success, output = xpcall(
            output(),
            lua.error_message,
            message,
            configuration,
            self
        )
    end
    if output ~= nil and type(output) == 'table' then
        output = lua.serialise(output)
    end
    return mattata.send_message(
        message.chat.id,
        '<pre>' .. mattata.escape_html(
            tostring(output)
        ) .. '</pre>',
        'html'
    )
end

return lua