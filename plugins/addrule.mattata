--[[
    Copyright 2020 Matthew Hesketh <wrxck0@gmail.com>
    This code is licensed under the MIT. See LICENSE for details.
]]

local addrule = {}
local mattata = require('mattata')
local redis = dofile('libs/redis.lua')

function addrule:init()
    addrule.commands = mattata.commands(self.info.username):command('addrule').table
    addrule.help = '/addrule <text> - Allows you to add another group rule!'
end

function addrule:on_message(message, configuration, language)
    if not mattata.is_group_admin(message.chat.id, message.from.id) then
        local output = language['errors']['admin']
        return mattata.send_reply(message, output)
    end
    local input = mattata.input(message.text)
    if not input then
        return mattata.send_reply(message, 'Please specify the rule you would like to add!')
    end
    local rules = redis:hget('chat:' .. message.chat.id .. ':values', 'rules')
    if not rules then
        return mattata.send_reply(message, 'You don\'t have any rules to add to! Please set group rules using /setrules!')
    end
    local new_rules = rules .. '\n' .. input
    local success = mattata.send_message(message.chat.id, new_rules, 'markdown')
    if not success and utf8.len(new_rules) > 4096 then
        return mattata.send_reply(message, 'I couldn\'t add that rule, as it would make the length of the rules longer than Telegram\'s 4096 character limit!')
    elseif not success then
        return mattata.send_reply(message, 'I couldn\'t add that rule, it appears it contains invalid Markdown formatting!')
    end
    redis:hset(
        'chat:' .. message.chat.id .. ':values',
        'rules',
        new_rules
    )
    return mattata.edit_message_text(
        message.chat.id,
        success.result.message_id,
        'Successfully updated the rules!'
    )
end

return addrule